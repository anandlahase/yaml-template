name: Update and Merge Workflow

on:
  workflow_dispatch:
    inputs:
      choice:
        type: choice
        description: 'Select input to update'
        required: true
        default: 'extraVars'
        options:
          - extraVars
          - inventory
          - deploymentManifest
  push:
    branches:
      - main

jobs:
  update_and_merge:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          ref: main

      - name: Create Branch
        uses: peterjgrainger/action-create-branch@v2.2.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          branch: 'update-${{ github.event.inputs.choice }}-inputs'

      - name: Verify Branch Creation  
        run: echo "Branch created:${{ steps.create_branch.outputs.branch }}"

      - name: Create prod/ directories if not exist
        run: |
          if [ ! -d "$(pwd)/prod/extraVars" ]; then
              mkdir -p $(pwd)/prod/extraVars
              touch $(pwd)/prod/extraVars/README.md
          fi
          if [ ! -d "$(pwd)/prod/inventory" ]; then
              mkdir -p $(pwd)/prod/inventory
              touch $(pwd)/prod/inventory/README.md
          fi
          if [ ! -d "$(pwd)/prod/deploymentManifest" ]; then
              mkdir -p $(pwd)/prod/deploymentManifest
              touch $(pwd)/prod/deploymentManifest/README.md
          fi
          ls -l $(pwd)/prod
          
      - name: Validate Input
        id: validate_input
        run: |
            choice="${{ github.event.inputs.choice }}"
            if [[ $choice != "extraVars" && $choice != "inventory" && $choice != "deploymentManifest" ]]; then
                echo "Invalid choice. Please choose one of: extraVars, inventory, deploymentManifest"
                exit 1
            fi
            echo "::set-output name=CHOICE::$choice"

      - name: Run Script
        run: |
            choice="${{ steps.validate_input.outputs.CHOICE }}"
            case $choice in
                "extraVars")
                    echo "Contents of $(pwd)/non-prod/extraVars/ directory:"
                    ls -l $(pwd)/non-prod/extraVars/
                    if [ -d "$(pwd)/non-prod/extraVars/" ]; then
                        cp $(pwd)/non-prod/extraVars/*.json $(pwd)/prod/extraVars/ || (echo "Failed to copy JSON files." && exit 1)
                        echo "Inputs updated for $choice"
                    else
                        echo "Directory $(pwd)/non-prod/extraVars/ does not exist."
                    fi
                    ;;
                "inventory")
                    echo "Contents of $(pwd)/non-prod/inventory/ directory:"
                    ls -l $(pwd)/non-prod/inventory/
                    if [ -d "$(pwd)/non-prod/inventory/" ]; then
                        cp $(pwd)/non-prod/inventory/*.json $(pwd)/prod/inventory/ || (echo "Failed to copy JSON files." && exit 1)
                        echo "Inputs updated for $choice"
                    else
                        echo "Directory $(pwd)/non-prod/inventory/ does not exist."
                    fi
                    ;;
                "deploymentManifest")
                echo "Contents of $(pwd)/non-prod/deploymentManifest/ directory:"
                    ls -l $(pwd)/non-prod/deploymentManifest/
                    if [ -d "$(pwd)/non-prod/deploymentManifest/" ]; then
                        cp $(pwd)/non-prod/deploymentManifest/*.json $(pwd)/prod/deploymentManifest/ || (echo "Failed to copy JSON files." && exit 1)
                        echo "Inputs updated for $choice"
                    else
                        echo "Directory $(pwd)/non-prod/deploymentManifest/ does not exist."
                    fi
            esac
        shell: bash

      - name: Git Commit
        run: |
          ls -l $(pwd)/prod
          git add .
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git commit -m "Automated update of dropdown inputs"
      - name: Git Checkout Branch
        run: git checkout -b update-${{ github.event.inputs.choice }}-inputs 

      - name: Pull Changes
        run: git pull origin main

      - name: Git Push
        run: git push origin update-${{ github.event.inputs.choice }}-inputs

      - name: Create Pull Request
        if: github.event_name == 'workflow_dispatch' || github.event_name == 'push'
        uses: peter-evans/create-pull-request@v3
        with:
          title: "Update ${{ github.event.inputs.choice }} dropdown inputs"
          head: update-${{ github.event.inputs.choice }}-inputs
          base: main
          commit-message: "Automated update of ${{ github.event.inputs.choice }} dropdown inputs"
          body: |
            Automated update of ${{ github.event.inputs.choice }} dropdown inputs.
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Approve Pull Request
        if: steps.create_pr.outcome == 'success'
        id: approve_pr
        uses: juliangruber/approve-pull-request-action@v2.0.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          number: ${{ steps.create_pr.outputs.pr_number }}
          repo: ${{ github.repository }}

      - name: Merge Pull Request
        if: steps.create_pr.outcome == 'success' && steps.approve_pr.outcome == 'success'
        id: merge_pr
        uses: pascalgn/automerge-action@v0.15.5
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PULL_REQUEST: ${{ github.repository }}/${{ steps.create_pr.outputs.pr_number }}
          UPDATE_METHOD: merge

      - name: Delete Merge Branch
        uses: dawidd6/action-delete-branch@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          owner: ${{ github.repository_owner }}
          repository: ${{ github.event.repository.name }}
          branches: ${{ steps.create_branch.outputs.branch }}
